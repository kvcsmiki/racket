interface MyNumber{
    double getValue();
}

interface NumericTest{
    boolean test(int n);
}

interface NumerFunc{
    int func(int n);
}
interface SomeFunc<T>{
    T func(T n);
}


class LambdaDemo{
    public static void main(String[] args){
        MyNumber myNum;
        myNum = () -> 123.45;
        System.out.println("A fixed value: "+myNum.getValue());

        myNum = () -> (int)(Math.random()*100);

        System.out.println("A random value: "+myNum.getValue());
        System.out.println("A random value: "+myNum.getValue());

        NumericTest isEven = n -> n%2 == 0;
        if(isEven.test(10))
            System.out.println("Even");
        else
            System.out.println("Odd");

        NumericTest isNonNeg = n -> n>=0;

        if(isNonNeg.test(1)) System.out.println("1 isnt negative");
        if(!isNonNeg.test(-1)) System.out.println("-1 is negative");

        //BLOCK LAMBDA

        NumerFunc factorial = n -> {
            int result = 1;
            for (int i = 1; i <= n; i++) {
                result *= i;
            }
            return result;
        };
        System.out.println(factorial.func(3));

        //GENFUNC LAMBDA
        SomeFunc<Integer> factorial2 = n -> {
            int result = 1;
            for (int i = 1; i <= n; i++) {
                result *= i;
            }
            return result;
        };
        System.out.println("Factorial of 3 is: "+factorial2.func(3));

        SomeFunc<String> reverse = n -> {
            String result = "";
            for (int i = n.length()-1; i >= 0 ; i--) {
                result+=n.charAt(i);
            }
            return result;
        };
        System.out.println(reverse.func("hehej"));

    }
}
